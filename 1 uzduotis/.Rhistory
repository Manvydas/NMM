# z_n+1 = (z_n)^2 + r
f1 <- function(z, r){
na.omit(quat_mult(z, z) + r)
}
# Parameters
x_min <- -2
x_max <- 4
y_min <- -1.5
y_max <- 1.5
rez_x <- 1024/32
rez_y <- 768/32
# begalybe <- 100
max_it_sk <- 256
z_0 <- c(0.1, 0, 0, 0)
# Color codes calculation
r_13 <- c(T,F,T,F)
r_23 <- c(F,T,T,F)
t1 <- Sys.time()
col_r13 <- nion_col(z_0 = z_0, r_ne_0 = r_13,
x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max,
rez_x = rez_x, rez_y = rez_y, max_it_sk = max_it_sk,
fz = f1)
t2 <- Sys.time()
col_r23 <- nion_col(z_0 = z_0, r_ne_0 = r_23,
x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max,
rez_x = rez_x, rez_y = rez_y, max_it_sk = max_it_sk,
fz = f1)
t3 <- Sys.time()
# r_1, r_3 != 0
# Time difference of 3.768826 hours
# Time difference of 3.032261 hours
t2-t1
# r_2, r_3 != 0
# Time difference of 2.43924 hours
# Time difference of 2.054715 hours
t3-t2
# Plotting fractals
plot_r13 <- nion_plot(col_r13, x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max)
plot_r13
plot_r23 <- nion_plot(col_r23, x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max)
plot_r23
library(data.table)
library(ggplot2)
# load("nion_functions.R")
# z_n+1 = (z_n)^2 + r
f1 <- function(z, r){
na.omit(quat_mult(z, z) + r)
}
# Parameters
x_min <- -2
x_max <- 4
y_min <- -1.5
y_max <- 1.5
rez_x <- 1024/16
rez_y <- 768/16
# begalybe <- 100
max_it_sk <- 256
z_0 <- c(0.1, 0, 0, 0)
# Color codes calculation
r_13 <- c(T,F,T,F)
r_23 <- c(F,T,T,F)
t1 <- Sys.time()
col_r13 <- nion_col(z_0 = z_0, r_ne_0 = r_13,
x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max,
rez_x = rez_x, rez_y = rez_y, max_it_sk = max_it_sk,
fz = f1)
t2 <- Sys.time()
col_r23 <- nion_col(z_0 = z_0, r_ne_0 = r_23,
x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max,
rez_x = rez_x, rez_y = rez_y, max_it_sk = max_it_sk,
fz = f1)
t3 <- Sys.time()
# r_1, r_3 != 0
# Time difference of 3.768826 hours
# Time difference of 3.032261 hours
t2-t1
# r_2, r_3 != 0
# Time difference of 2.43924 hours
# Time difference of 2.054715 hours
t3-t2
# Plotting fractals
plot_r13 <- nion_plot(col_r13, x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max)
plot_r13
plot_r23 <- nion_plot(col_r23, x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max)
plot_r23
library(data.table)
library(ggplot2)
# load("nion_functions.R")
# z_n+1 = (z_n)^2 + r
f1 <- function(z, r){
na.omit(quat_mult(z, z) + r)
}
# Parameters
x_min <- -2
x_max <- 4
y_min <- -1.5
y_max <- 1.5
rez_x <- 1024/8
rez_y <- 768/8
# begalybe <- 100
max_it_sk <- 256
z_0 <- c(0.1, 0, 0, 0)
# Color codes calculation
r_13 <- c(T,F,T,F)
r_23 <- c(F,T,T,F)
t1 <- Sys.time()
col_r13 <- nion_col(z_0 = z_0, r_ne_0 = r_13,
x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max,
rez_x = rez_x, rez_y = rez_y, max_it_sk = max_it_sk,
fz = f1)
t2 <- Sys.time()
col_r23 <- nion_col(z_0 = z_0, r_ne_0 = r_23,
x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max,
rez_x = rez_x, rez_y = rez_y, max_it_sk = max_it_sk,
fz = f1)
t3 <- Sys.time()
# r_1, r_3 != 0
# Time difference of 3.768826 hours
# Time difference of 3.032261 hours
t2-t1
# r_2, r_3 != 0
# Time difference of 2.43924 hours
# Time difference of 2.054715 hours
t3-t2
# Plotting fractals
plot_r13 <- nion_plot(col_r13, x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max)
plot_r13
plot_r23 <- nion_plot(col_r23, x_min = x_min, x_max = x_max, y_min = y_min, y_max = y_max)
plot_r23
cols=colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 150
ymin = -1.5
ymax = 1.5
ny = 150
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
z
k
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
n=200*2
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
n=200*2*2
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
x
y
k
?image
# parameters
cols <- colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 500
ymin = -1.5
ymax = 1.5
ny = 500
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols)
system.time(# parameters
cols <- colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 500
ymin = -1.5
ymax = 1.5
ny = 500
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols))
a<-Sys.time()
# parameters
cols <- colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 500
ymin = -1.5
ymax = 1.5
ny = 500
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols)
b<-Sys.time()
b-a
a<-Sys.time()
cols=colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 150
ymin = -1.5
ymax = 1.5
ny = 150
n=200*2*2
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
b<-Sys.time()
b-a
a<-Sys.time()
cols=colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 150
ymin = -1.5
ymax = 1.5
ny = 150
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
b<-Sys.time()
b-a
a<-Sys.time()
cols=colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 150
ymin = -1.5
ymax = 1.5
ny = 150
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
b<-Sys.time()
b-a
mandelbrot_naive <- function(xmin=-2, xmax=2, nx=500,
ymin=-1.5, ymax=1.5, ny=500,
n=100, showplot=TRUE,
cols=colorRampPalette(c("blue","yellow","red","black"))(11))
{
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
if (showplot==TRUE) { image(x,y,k,col=cols,xlab="Re(c)",ylab="Im(c)")}
return(k)
}
# Vectorized version
mandelbrot_vectorized <- function(xmin=-2, xmax=2, nx=500,
ymin=-1.5, ymax=1.5, ny=500,
n=100, showplot=TRUE,
cols=colorRampPalette(c("blue","yellow","red","black"))(11))
{
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
if (showplot==TRUE) { image(x,y,k,col=cols, xlab="Re(c)", ylab="Im(c)")}
return(k)
}
# Compare naive vs. vectorized runtimes
compare_runtimes <- function()
{
system.time(mandelbrot_naive(showplot=F))
system.time(mandelbrot_vectorized(showplot=F))
}
compare_runtimes()
compare_runtimes()
mandelbrot_naive()
system.time(mandelbrot_naive())
system.time(mandelbrot_naive())
mandelbrot_naive()
system.time(mandelbrot_naive())
system.time(mandelbrot_vectorized())
compare_runtimes()
# Vectorized version
mandelbrot_vectorized <- function(xmin=0.338, xmax=0.34, nx=500,
ymin=0.572, ymax=0.574, ny=500,
n=100, showplot=TRUE,
cols=colorRampPalette(c("blue","yellow","red","black"))(11))
{
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
if (showplot==TRUE) { image(x,y,k,col=cols, xlab="Re(c)", ylab="Im(c)")}
return(k)
}
mandelbrot_vectorized()
mandelbrot_vectorized(n=10000)
x
y
k
x
y
# Vectorized version
mandelbrot_vectorized <- function(xmin=0.338, xmax=0.34, nx=500,
ymin=0.572, ymax=0.574, ny=500,
n=100, showplot=TRUE,
cols=colorRampPalette(c("blue","yellow","red","black"))(11))
{
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
if (showplot==TRUE) { image(x,y,k,col=cols, xlab="Re(c)", ylab="Im(c)")}
return(k)
}
mandelbrot_vectorized()
x
mandelbrot_vectorized(n=10)
mandelbrot_vectorized(n=1000)
# Vectorized version
mandelbrot_vectorized <- function(xmin=0.338, xmax=0.34, nx=5000,
ymin=0.572, ymax=0.574, ny=5000,
n=100, showplot=TRUE,
cols=colorRampPalette(c("blue","yellow","red","black"))(11))
{
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
if (showplot==TRUE) { image(x,y,k,col=cols, xlab="Re(c)", ylab="Im(c)")}
return(k)
}
mandelbrot_vectorized(n=100)
# Vectorized version
mandelbrot_vectorized <- function(xmin=0.0338, xmax=0.34, nx=5000,
ymin=0.0572, ymax=0.574, ny=5000,
n=100, showplot=TRUE,
cols=colorRampPalette(c("blue","yellow","red","black"))(11))
{
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
if (showplot==TRUE) { image(x,y,k,col=cols, xlab="Re(c)", ylab="Im(c)")}
return(k)
}
iinstall.packages("shiny")
install.packages("shiny")
shiny::runGitHub("blmoore/shinybrot")
install.packages("mandelbrot")
shiny::runGitHub("blmoore/shinybrot")
gc()
